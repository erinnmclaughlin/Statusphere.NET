@using Microsoft.AspNetCore.SignalR.Client
@inject PersistentComponentState ApplicationState
@implements IAsyncDisposable

<div class="status-timeline">
    @foreach (var (timestamp, status) in ValidStatuses.Reverse().Take(10))
    {
        <div class="status-line">
            <div>
                <div class="status">@status.Status</div>
            </div>
            <div class="desc">
                <a class="author" href="https://bsky.app/profile/@status.AuthorDid" target="_blank">
                    @DidToHandleMap.GetValueOrDefault(status.AuthorDid, "Someone")
                </a>
                @(timestamp.ToUniversalTime().Date == DateTime.Today.ToUniversalTime() ? " is" : " was") feeling @status.Status on @timestamp.ToLocalTime()
            </div>
        </div>
    }
</div>

@code {
    private PersistingComponentStateSubscription _subscription;
    private HubConnection? _hubConnection = null!;

    private SortedList<DateTime, StatusDto> ValidStatuses { get; set; } = [];

    [Inject] 
    private DidClient DidClient { get; set; } = null!;
    
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Parameter, EditorRequired]
    public required List<StatusDto> Statuses { get; set; }

    private Dictionary<string, string> DidToHandleMap { get; set; } = [];

    public ValueTask DisposeAsync()
    {
        _subscription.Dispose();

        if (_hubConnection is null)
            return ValueTask.CompletedTask;

        return _hubConnection.DisposeAsync();
    }

    protected override void OnInitialized()
    {
        _subscription = ApplicationState.RegisterOnPersisting(Persist);

        if (ApplicationState.TryTakeFromJson<Dictionary<string, string>>(nameof(DidToHandleMap), out var map) && map is not null)
        {
            DidToHandleMap = map;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        foreach (var status in Statuses)
        {
            await ValidateAndAddStatus(status);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await ConnectAsync();
    }

    private Task Persist()
    {
        ApplicationState.PersistAsJson(nameof(DidToHandleMap), DidToHandleMap);
        return Task.CompletedTask;
    }

    private async Task ConnectAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/status"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<StatusDto>("StatusCreated", async dto =>
        {
            await ValidateAndAddStatus(dto);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task ValidateAndAddStatus(StatusDto status)
    {
        if (!DidToHandleMap.ContainsKey(status.AuthorDid))
        {
            var didDocument = await DidClient.GetDidDocument(status.AuthorDid);
            DidToHandleMap.TryAdd(status.AuthorDid, didDocument.AlsoKnownAs[0].Replace("at://", "@"));
        } 
        
        ValidStatuses.TryAdd(status.CreatedAt.ToUniversalTime(), status);
    }
}
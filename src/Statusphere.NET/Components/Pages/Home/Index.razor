@page "/"
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Statusphere.NET.Database

<PageTitle>Home</PageTitle>

<div class="card">
    <SessionGreeting />
</div>

<StatusForm CurrentStatus="MyStatus" CurrentStatusChanged="OnStatusChanged" />

<StatusTimeline @rendermode="InteractiveAuto" Statuses="Statuses" />

@code {

    private Status? MyStatus { get; set; }
    private List<StatusDto> Statuses { get; set; } = [];

    [Inject] 
    private StatusphereClient ApiClient { get; set; } = null!;
    
    [Inject] 
    private IDbContextFactory<StatusphereDbContext> DbContextFactory { get; set; } = null!;

    [CascadingParameter] 
    private Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        if (Statuses.Count == 0)
        {
            Statuses = await dbContext.Statuses
               .OrderByDescending(x => x.CreatedAt)
               .Select(x => new StatusDto(x.AuthorDid, x.Value, x.CreatedAt))
               .Take(10)
               .ToListAsync();
        }

        var authState = await AuthStateTask;

        if (authState.User is { Identity.IsAuthenticated: true } authenticatedUser)
        {
            var did = authenticatedUser.FindFirstValue(ClaimTypes.NameIdentifier);

            MyStatus = await dbContext.Statuses
                .OrderByDescending(x => x.CreatedAt)
                .Where(x => x.AuthorDid == did)
                .AsNoTracking()
                .FirstOrDefaultAsync();
        }
    }

    private async Task OnStatusChanged(Status? status)
    {
        if (status is null) return;

        MyStatus = status;
        Statuses.Add(new StatusDto(status.AuthorDid, status.Value, status.CreatedAt));
        StateHasChanged();

        await ApiClient.UpdateStatus(status);
        
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        dbContext.Statuses.Add(MyStatus);
        await dbContext.SaveChangesAsync();
    }
}